/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "keymap_italian.h"

// Layer definitions
    #define BASE 0
    #define SYM 1
    #define EXT 2
    #define NUM 3
    #define FNC 4
    #define ACCENT 5
		#define SETTINGS 6
// -----------------

/*                KEY POSITIONS

  ╭────────────────────╮ ╭────────────────────╮
  │  0   1   2   3   4 │ │  5   6   7   8   9 │
  │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
  │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
  ╰───────────╮ 30  31 │ │ 32  33 ╭───────────╯
              ╰────────╯ ╰────────╯            */

&mt {
   //  flavor = "tap-preferred";
   // tapping_term_ms = <200>;
};

&sk {
    ignore-modifiers;
};

/ {
    macros {
        // sometimes my device thinks a modifier is being held down
        // pressing all modifiers fixes it.
        unstick: unstick {
            label = "ZM_unstick";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LALT &kp RALT &kp LGUI &kp RGUI>;
        };
        arrow: arrow {
            label = "ZM_arrow";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&kp MINUS &kp GT>;
        };
        fat_arrow: fat_arrow {
            label = "ZM_fat_arrow";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&kp EQUAL &kp GT>;
        };
    };

    combos {
        compatible = "zmk,combos";
                // workaround for dead pin
        combo_semi {
            timeout-ms = <30>;
            key-positions = <0 10>;
            bindings = <&kp SEMI>;
            layers = <BASE>;
        };
        combo_plus {
            timeout-ms = <30>;
            key-positions = <0 10>;
            bindings = <&kp PLUS>;
            layers = <SYM>;
        };
				// both right thumb keys
        combo_accent {
            timeout-ms = <300>;
            key-positions = <32 33>;
            bindings = <&mo ACCENT>;
        };
                // internal-left & external-right thumb keys
        combo_function {
                timeout-ms = <200>;
                key-positions = <31 33>;
                bindings = <&mo FNC>;
        };
                // both left thumb keys
        combo_settings {
                timeout-ms = <300>;
                key-positions = <30 31>;
                bindings = <&mo SETTINGS>;
        };
    };

    behaviors {
        pv_arrow: arrow_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&arrow>, <&fat_arrow>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
            compatible = "zmk,keymap";

        // Base alpha layer
       		default_layer {
		bindings = <
		&kp QUOT &kp COMMA &kp DOT &kp P &kp Y           &kp F &kp G  &kp C     &kp R   &kp L 
		&kp A    &kp O     &kp E   &kp U &kp I           &kp D &kp H  &kp T     &kp N   &kp S
		&kp SEMI &kp Q     &kp J   &kp K &kp X           &kp B &kp M  &kp W     &kp V   &kp Z
             								&mo EXT &mt LSHIFT SPACE           &kp SPACE &sl SYM
		>;
		};

        // High frequency symbols
       		sym_layer {
		bindings = <
		&kp ESC &kp LBKT &kp LPAR &kp LBRC &kp TILDE		&kp CARET &kp RBRC &kp RPAR &kp RBKT &kp GRAVE
		&kp MINUS &kp STAR &kp EQUAL &kp UNDER &kp DLLR     &kp HASH &sk RCTRL &sk LALT &sk RGUI &sk RSHIFT
		&kp PLUS &kp PIPE &kp AT &kp FSLH &kp PRCNT 	    &pv_arrow &kp BSLH &kp AMPS &kp QMARK &kp EXCL
					                        &mo NUM  &mo FNC       &trans &trans
		>;
		};

        // Navigation
		    ext_layer {
		bindings = <
		&kp ESC  &trans &trans  &kp TAB  &trans     			    &kp PG_UP   &kp HOME        &kp UP          &kp END     &kp DEL
		&sk LSHIFT  &sk LGUI  &sk LALT &sk LCTRL  &kp RALT 			&kp PG_DN   &kp LEFT        &kp DOWN        &kp RIGHT   &kp BSPC
		&kp LC(Z)  &kp LC(X) &kp LC(C) &kp LC(V)  &trans            &caps_word  &kp LC(BSPC)    &kp LS(LG(ENTER))  &kp LG(ENTER)  &kp ENTER
					                        &trans &kp LCTRL    &trans  &mo NUM
		>;
		};

        // Numbers
       		num_layer {
		bindings = <
        &kp N7 &kp N5 &kp N3 &kp N1 &kp N9	                &kp N0 &kp N2 &kp N4 &kp N6 &kp N8
		&sk LSHIFT &sk LGUI &sk LALT &sk LCTRL &none        &none &sk RCTRL &sk LALT &sk RGUI &sk RSHIFT
		&none &none &none &none &none		                &none &none &none &none &none
          				           	&none &none        	&none &none 
		>;
		};

        // Function keys
       		fnc_layer {
		bindings = <
		&kp F7 &kp F5 &kp F3 &kp F1 &kp F9                  &kp F10 &kp F2 &kp F4 &kp F6 &kp F8 
		&sk LSHIFT &sk LGUI &sk LALT &sk LCTRL &kp F11      &kp F12 &sk RCTRL &sk LALT &sk RGUI &sk RSHIFT
		&none &none &none &none &none                       &none &kp PRINTSCREEN &none &none &none 
          				           &none &none              &none &none  
		>;
		};

        // Used to type regional accents.
       		accent_layer {
		bindings = <
		&none &none &none &none &none                         &none &none &none &none &none 
		&none &none &kp PLUS &kp SEMI &none                         &none &none &none &none &none
		&none &none &none &none &none                         &none &none &none &none &none
          				     		&none &none                         &none &none 
		>;
		};

        // Used to change the keyboard's settings.
       		settings_layer {
		bindings = <
		&bootloader &none &none &bt BT_CLR &bt BT_SEL 0               &bt BT_SEL 3 &none &unstick &none &bootloader 
		&none &none &none &none      &bt BT_SEL 1 						  &bt BT_SEL 4 &none &none &none &none
		&none &none &none &none      &bt BT_SEL 2               &bt BT_SEL 5 &none &none &none &none
          				     &none &none                         &none &none 
		>;
		};
        
	};
};
